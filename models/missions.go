// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Mission is an object representing the database table.
type Mission struct {
	ID int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	// 名前
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`
	// ミッションの種類
	MissionType string `boil:"mission_type" json:"mission_type" toml:"mission_type" yaml:"mission_type"`
	// 削除フラグ
	IsDeleted bool      `boil:"is_deleted" json:"is_deleted" toml:"is_deleted" yaml:"is_deleted"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *missionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L missionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MissionColumns = struct {
	ID          string
	Name        string
	MissionType string
	IsDeleted   string
	UpdatedAt   string
	CreatedAt   string
}{
	ID:          "id",
	Name:        "name",
	MissionType: "mission_type",
	IsDeleted:   "is_deleted",
	UpdatedAt:   "updated_at",
	CreatedAt:   "created_at",
}

var MissionTableColumns = struct {
	ID          string
	Name        string
	MissionType string
	IsDeleted   string
	UpdatedAt   string
	CreatedAt   string
}{
	ID:          "missions.id",
	Name:        "missions.name",
	MissionType: "missions.mission_type",
	IsDeleted:   "missions.is_deleted",
	UpdatedAt:   "missions.updated_at",
	CreatedAt:   "missions.created_at",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var MissionWhere = struct {
	ID          whereHelperint64
	Name        whereHelperstring
	MissionType whereHelperstring
	IsDeleted   whereHelperbool
	UpdatedAt   whereHelpertime_Time
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint64{field: "\"missions\".\"id\""},
	Name:        whereHelperstring{field: "\"missions\".\"name\""},
	MissionType: whereHelperstring{field: "\"missions\".\"mission_type\""},
	IsDeleted:   whereHelperbool{field: "\"missions\".\"is_deleted\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"missions\".\"updated_at\""},
	CreatedAt:   whereHelpertime_Time{field: "\"missions\".\"created_at\""},
}

// MissionRels is where relationship names are stored.
var MissionRels = struct {
	CoinCountMission           string
	GetItemMission             string
	LoginMission               string
	MonsterKillCountMission    string
	MonsterKillMission         string
	MonsterLevelUpCountMission string
	MonsterLevelUpMission      string
	MissionRewardCoins         string
	MissionRewardItems         string
	UserMissions               string
}{
	CoinCountMission:           "CoinCountMission",
	GetItemMission:             "GetItemMission",
	LoginMission:               "LoginMission",
	MonsterKillCountMission:    "MonsterKillCountMission",
	MonsterKillMission:         "MonsterKillMission",
	MonsterLevelUpCountMission: "MonsterLevelUpCountMission",
	MonsterLevelUpMission:      "MonsterLevelUpMission",
	MissionRewardCoins:         "MissionRewardCoins",
	MissionRewardItems:         "MissionRewardItems",
	UserMissions:               "UserMissions",
}

// missionR is where relationships are stored.
type missionR struct {
	CoinCountMission           *CoinCountMission           `boil:"CoinCountMission" json:"CoinCountMission" toml:"CoinCountMission" yaml:"CoinCountMission"`
	GetItemMission             *GetItemMission             `boil:"GetItemMission" json:"GetItemMission" toml:"GetItemMission" yaml:"GetItemMission"`
	LoginMission               *LoginMission               `boil:"LoginMission" json:"LoginMission" toml:"LoginMission" yaml:"LoginMission"`
	MonsterKillCountMission    *MonsterKillCountMission    `boil:"MonsterKillCountMission" json:"MonsterKillCountMission" toml:"MonsterKillCountMission" yaml:"MonsterKillCountMission"`
	MonsterKillMission         *MonsterKillMission         `boil:"MonsterKillMission" json:"MonsterKillMission" toml:"MonsterKillMission" yaml:"MonsterKillMission"`
	MonsterLevelUpCountMission *MonsterLevelUpCountMission `boil:"MonsterLevelUpCountMission" json:"MonsterLevelUpCountMission" toml:"MonsterLevelUpCountMission" yaml:"MonsterLevelUpCountMission"`
	MonsterLevelUpMission      *MonsterLevelUpMission      `boil:"MonsterLevelUpMission" json:"MonsterLevelUpMission" toml:"MonsterLevelUpMission" yaml:"MonsterLevelUpMission"`
	MissionRewardCoins         MissionRewardCoinSlice      `boil:"MissionRewardCoins" json:"MissionRewardCoins" toml:"MissionRewardCoins" yaml:"MissionRewardCoins"`
	MissionRewardItems         MissionRewardItemSlice      `boil:"MissionRewardItems" json:"MissionRewardItems" toml:"MissionRewardItems" yaml:"MissionRewardItems"`
	UserMissions               UserMissionSlice            `boil:"UserMissions" json:"UserMissions" toml:"UserMissions" yaml:"UserMissions"`
}

// NewStruct creates a new relationship struct
func (*missionR) NewStruct() *missionR {
	return &missionR{}
}

func (r *missionR) GetCoinCountMission() *CoinCountMission {
	if r == nil {
		return nil
	}
	return r.CoinCountMission
}

func (r *missionR) GetGetItemMission() *GetItemMission {
	if r == nil {
		return nil
	}
	return r.GetItemMission
}

func (r *missionR) GetLoginMission() *LoginMission {
	if r == nil {
		return nil
	}
	return r.LoginMission
}

func (r *missionR) GetMonsterKillCountMission() *MonsterKillCountMission {
	if r == nil {
		return nil
	}
	return r.MonsterKillCountMission
}

func (r *missionR) GetMonsterKillMission() *MonsterKillMission {
	if r == nil {
		return nil
	}
	return r.MonsterKillMission
}

func (r *missionR) GetMonsterLevelUpCountMission() *MonsterLevelUpCountMission {
	if r == nil {
		return nil
	}
	return r.MonsterLevelUpCountMission
}

func (r *missionR) GetMonsterLevelUpMission() *MonsterLevelUpMission {
	if r == nil {
		return nil
	}
	return r.MonsterLevelUpMission
}

func (r *missionR) GetMissionRewardCoins() MissionRewardCoinSlice {
	if r == nil {
		return nil
	}
	return r.MissionRewardCoins
}

func (r *missionR) GetMissionRewardItems() MissionRewardItemSlice {
	if r == nil {
		return nil
	}
	return r.MissionRewardItems
}

func (r *missionR) GetUserMissions() UserMissionSlice {
	if r == nil {
		return nil
	}
	return r.UserMissions
}

// missionL is where Load methods for each relationship are stored.
type missionL struct{}

var (
	missionAllColumns            = []string{"id", "name", "mission_type", "is_deleted", "updated_at", "created_at"}
	missionColumnsWithoutDefault = []string{"name"}
	missionColumnsWithDefault    = []string{"id", "mission_type", "is_deleted", "updated_at", "created_at"}
	missionPrimaryKeyColumns     = []string{"id"}
	missionGeneratedColumns      = []string{}
)

type (
	// MissionSlice is an alias for a slice of pointers to Mission.
	// This should almost always be used instead of []Mission.
	MissionSlice []*Mission
	// MissionHook is the signature for custom Mission hook methods
	MissionHook func(context.Context, boil.ContextExecutor, *Mission) error

	missionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	missionType                 = reflect.TypeOf(&Mission{})
	missionMapping              = queries.MakeStructMapping(missionType)
	missionPrimaryKeyMapping, _ = queries.BindMapping(missionType, missionMapping, missionPrimaryKeyColumns)
	missionInsertCacheMut       sync.RWMutex
	missionInsertCache          = make(map[string]insertCache)
	missionUpdateCacheMut       sync.RWMutex
	missionUpdateCache          = make(map[string]updateCache)
	missionUpsertCacheMut       sync.RWMutex
	missionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var missionAfterSelectHooks []MissionHook

var missionBeforeInsertHooks []MissionHook
var missionAfterInsertHooks []MissionHook

var missionBeforeUpdateHooks []MissionHook
var missionAfterUpdateHooks []MissionHook

var missionBeforeDeleteHooks []MissionHook
var missionAfterDeleteHooks []MissionHook

var missionBeforeUpsertHooks []MissionHook
var missionAfterUpsertHooks []MissionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Mission) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Mission) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Mission) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Mission) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Mission) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Mission) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Mission) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Mission) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Mission) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range missionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMissionHook registers your hook function for all future operations.
func AddMissionHook(hookPoint boil.HookPoint, missionHook MissionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		missionAfterSelectHooks = append(missionAfterSelectHooks, missionHook)
	case boil.BeforeInsertHook:
		missionBeforeInsertHooks = append(missionBeforeInsertHooks, missionHook)
	case boil.AfterInsertHook:
		missionAfterInsertHooks = append(missionAfterInsertHooks, missionHook)
	case boil.BeforeUpdateHook:
		missionBeforeUpdateHooks = append(missionBeforeUpdateHooks, missionHook)
	case boil.AfterUpdateHook:
		missionAfterUpdateHooks = append(missionAfterUpdateHooks, missionHook)
	case boil.BeforeDeleteHook:
		missionBeforeDeleteHooks = append(missionBeforeDeleteHooks, missionHook)
	case boil.AfterDeleteHook:
		missionAfterDeleteHooks = append(missionAfterDeleteHooks, missionHook)
	case boil.BeforeUpsertHook:
		missionBeforeUpsertHooks = append(missionBeforeUpsertHooks, missionHook)
	case boil.AfterUpsertHook:
		missionAfterUpsertHooks = append(missionAfterUpsertHooks, missionHook)
	}
}

// One returns a single mission record from the query.
func (q missionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Mission, error) {
	o := &Mission{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for missions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Mission records from the query.
func (q missionQuery) All(ctx context.Context, exec boil.ContextExecutor) (MissionSlice, error) {
	var o []*Mission

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Mission slice")
	}

	if len(missionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Mission records in the query.
func (q missionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count missions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q missionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if missions exists")
	}

	return count > 0, nil
}

// CoinCountMission pointed to by the foreign key.
func (o *Mission) CoinCountMission(mods ...qm.QueryMod) coinCountMissionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"mission_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return CoinCountMissions(queryMods...)
}

// GetItemMission pointed to by the foreign key.
func (o *Mission) GetItemMission(mods ...qm.QueryMod) getItemMissionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"mission_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return GetItemMissions(queryMods...)
}

// LoginMission pointed to by the foreign key.
func (o *Mission) LoginMission(mods ...qm.QueryMod) loginMissionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"mission_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return LoginMissions(queryMods...)
}

// MonsterKillCountMission pointed to by the foreign key.
func (o *Mission) MonsterKillCountMission(mods ...qm.QueryMod) monsterKillCountMissionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"mission_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return MonsterKillCountMissions(queryMods...)
}

// MonsterKillMission pointed to by the foreign key.
func (o *Mission) MonsterKillMission(mods ...qm.QueryMod) monsterKillMissionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"mission_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return MonsterKillMissions(queryMods...)
}

// MonsterLevelUpCountMission pointed to by the foreign key.
func (o *Mission) MonsterLevelUpCountMission(mods ...qm.QueryMod) monsterLevelUpCountMissionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"mission_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return MonsterLevelUpCountMissions(queryMods...)
}

// MonsterLevelUpMission pointed to by the foreign key.
func (o *Mission) MonsterLevelUpMission(mods ...qm.QueryMod) monsterLevelUpMissionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"mission_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return MonsterLevelUpMissions(queryMods...)
}

// MissionRewardCoins retrieves all the mission_reward_coin's MissionRewardCoins with an executor.
func (o *Mission) MissionRewardCoins(mods ...qm.QueryMod) missionRewardCoinQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mission_reward_coins\".\"mission_id\"=?", o.ID),
	)

	return MissionRewardCoins(queryMods...)
}

// MissionRewardItems retrieves all the mission_reward_item's MissionRewardItems with an executor.
func (o *Mission) MissionRewardItems(mods ...qm.QueryMod) missionRewardItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mission_reward_items\".\"mission_id\"=?", o.ID),
	)

	return MissionRewardItems(queryMods...)
}

// UserMissions retrieves all the user_mission's UserMissions with an executor.
func (o *Mission) UserMissions(mods ...qm.QueryMod) userMissionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_missions\".\"mission_id\"=?", o.ID),
	)

	return UserMissions(queryMods...)
}

// LoadCoinCountMission allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (missionL) LoadCoinCountMission(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMission interface{}, mods queries.Applicator) error {
	var slice []*Mission
	var object *Mission

	if singular {
		var ok bool
		object, ok = maybeMission.(*Mission)
		if !ok {
			object = new(Mission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMission))
			}
		}
	} else {
		s, ok := maybeMission.(*[]*Mission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &missionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &missionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`coin_count_missions`),
		qm.WhereIn(`coin_count_missions.mission_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CoinCountMission")
	}

	var resultSlice []*CoinCountMission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CoinCountMission")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for coin_count_missions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for coin_count_missions")
	}

	if len(coinCountMissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CoinCountMission = foreign
		if foreign.R == nil {
			foreign.R = &coinCountMissionR{}
		}
		foreign.R.Mission = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.MissionID {
				local.R.CoinCountMission = foreign
				if foreign.R == nil {
					foreign.R = &coinCountMissionR{}
				}
				foreign.R.Mission = local
				break
			}
		}
	}

	return nil
}

// LoadGetItemMission allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (missionL) LoadGetItemMission(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMission interface{}, mods queries.Applicator) error {
	var slice []*Mission
	var object *Mission

	if singular {
		var ok bool
		object, ok = maybeMission.(*Mission)
		if !ok {
			object = new(Mission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMission))
			}
		}
	} else {
		s, ok := maybeMission.(*[]*Mission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &missionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &missionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`get_item_missions`),
		qm.WhereIn(`get_item_missions.mission_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GetItemMission")
	}

	var resultSlice []*GetItemMission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GetItemMission")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for get_item_missions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for get_item_missions")
	}

	if len(getItemMissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GetItemMission = foreign
		if foreign.R == nil {
			foreign.R = &getItemMissionR{}
		}
		foreign.R.Mission = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.MissionID {
				local.R.GetItemMission = foreign
				if foreign.R == nil {
					foreign.R = &getItemMissionR{}
				}
				foreign.R.Mission = local
				break
			}
		}
	}

	return nil
}

// LoadLoginMission allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (missionL) LoadLoginMission(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMission interface{}, mods queries.Applicator) error {
	var slice []*Mission
	var object *Mission

	if singular {
		var ok bool
		object, ok = maybeMission.(*Mission)
		if !ok {
			object = new(Mission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMission))
			}
		}
	} else {
		s, ok := maybeMission.(*[]*Mission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &missionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &missionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`login_missions`),
		qm.WhereIn(`login_missions.mission_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load LoginMission")
	}

	var resultSlice []*LoginMission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice LoginMission")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for login_missions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for login_missions")
	}

	if len(loginMissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LoginMission = foreign
		if foreign.R == nil {
			foreign.R = &loginMissionR{}
		}
		foreign.R.Mission = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.MissionID {
				local.R.LoginMission = foreign
				if foreign.R == nil {
					foreign.R = &loginMissionR{}
				}
				foreign.R.Mission = local
				break
			}
		}
	}

	return nil
}

// LoadMonsterKillCountMission allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (missionL) LoadMonsterKillCountMission(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMission interface{}, mods queries.Applicator) error {
	var slice []*Mission
	var object *Mission

	if singular {
		var ok bool
		object, ok = maybeMission.(*Mission)
		if !ok {
			object = new(Mission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMission))
			}
		}
	} else {
		s, ok := maybeMission.(*[]*Mission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &missionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &missionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`monster_kill_count_missions`),
		qm.WhereIn(`monster_kill_count_missions.mission_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MonsterKillCountMission")
	}

	var resultSlice []*MonsterKillCountMission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MonsterKillCountMission")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for monster_kill_count_missions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for monster_kill_count_missions")
	}

	if len(monsterKillCountMissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MonsterKillCountMission = foreign
		if foreign.R == nil {
			foreign.R = &monsterKillCountMissionR{}
		}
		foreign.R.Mission = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.MissionID {
				local.R.MonsterKillCountMission = foreign
				if foreign.R == nil {
					foreign.R = &monsterKillCountMissionR{}
				}
				foreign.R.Mission = local
				break
			}
		}
	}

	return nil
}

// LoadMonsterKillMission allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (missionL) LoadMonsterKillMission(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMission interface{}, mods queries.Applicator) error {
	var slice []*Mission
	var object *Mission

	if singular {
		var ok bool
		object, ok = maybeMission.(*Mission)
		if !ok {
			object = new(Mission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMission))
			}
		}
	} else {
		s, ok := maybeMission.(*[]*Mission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &missionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &missionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`monster_kill_missions`),
		qm.WhereIn(`monster_kill_missions.mission_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MonsterKillMission")
	}

	var resultSlice []*MonsterKillMission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MonsterKillMission")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for monster_kill_missions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for monster_kill_missions")
	}

	if len(monsterKillMissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MonsterKillMission = foreign
		if foreign.R == nil {
			foreign.R = &monsterKillMissionR{}
		}
		foreign.R.Mission = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.MissionID {
				local.R.MonsterKillMission = foreign
				if foreign.R == nil {
					foreign.R = &monsterKillMissionR{}
				}
				foreign.R.Mission = local
				break
			}
		}
	}

	return nil
}

// LoadMonsterLevelUpCountMission allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (missionL) LoadMonsterLevelUpCountMission(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMission interface{}, mods queries.Applicator) error {
	var slice []*Mission
	var object *Mission

	if singular {
		var ok bool
		object, ok = maybeMission.(*Mission)
		if !ok {
			object = new(Mission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMission))
			}
		}
	} else {
		s, ok := maybeMission.(*[]*Mission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &missionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &missionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`monster_level_up_count_missions`),
		qm.WhereIn(`monster_level_up_count_missions.mission_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MonsterLevelUpCountMission")
	}

	var resultSlice []*MonsterLevelUpCountMission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MonsterLevelUpCountMission")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for monster_level_up_count_missions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for monster_level_up_count_missions")
	}

	if len(monsterLevelUpCountMissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MonsterLevelUpCountMission = foreign
		if foreign.R == nil {
			foreign.R = &monsterLevelUpCountMissionR{}
		}
		foreign.R.Mission = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.MissionID {
				local.R.MonsterLevelUpCountMission = foreign
				if foreign.R == nil {
					foreign.R = &monsterLevelUpCountMissionR{}
				}
				foreign.R.Mission = local
				break
			}
		}
	}

	return nil
}

// LoadMonsterLevelUpMission allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (missionL) LoadMonsterLevelUpMission(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMission interface{}, mods queries.Applicator) error {
	var slice []*Mission
	var object *Mission

	if singular {
		var ok bool
		object, ok = maybeMission.(*Mission)
		if !ok {
			object = new(Mission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMission))
			}
		}
	} else {
		s, ok := maybeMission.(*[]*Mission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &missionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &missionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`monster_level_up_missions`),
		qm.WhereIn(`monster_level_up_missions.mission_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MonsterLevelUpMission")
	}

	var resultSlice []*MonsterLevelUpMission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MonsterLevelUpMission")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for monster_level_up_missions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for monster_level_up_missions")
	}

	if len(monsterLevelUpMissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MonsterLevelUpMission = foreign
		if foreign.R == nil {
			foreign.R = &monsterLevelUpMissionR{}
		}
		foreign.R.Mission = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.MissionID {
				local.R.MonsterLevelUpMission = foreign
				if foreign.R == nil {
					foreign.R = &monsterLevelUpMissionR{}
				}
				foreign.R.Mission = local
				break
			}
		}
	}

	return nil
}

// LoadMissionRewardCoins allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (missionL) LoadMissionRewardCoins(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMission interface{}, mods queries.Applicator) error {
	var slice []*Mission
	var object *Mission

	if singular {
		var ok bool
		object, ok = maybeMission.(*Mission)
		if !ok {
			object = new(Mission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMission))
			}
		}
	} else {
		s, ok := maybeMission.(*[]*Mission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &missionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &missionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mission_reward_coins`),
		qm.WhereIn(`mission_reward_coins.mission_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mission_reward_coins")
	}

	var resultSlice []*MissionRewardCoin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mission_reward_coins")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mission_reward_coins")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mission_reward_coins")
	}

	if len(missionRewardCoinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MissionRewardCoins = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &missionRewardCoinR{}
			}
			foreign.R.Mission = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MissionID {
				local.R.MissionRewardCoins = append(local.R.MissionRewardCoins, foreign)
				if foreign.R == nil {
					foreign.R = &missionRewardCoinR{}
				}
				foreign.R.Mission = local
				break
			}
		}
	}

	return nil
}

// LoadMissionRewardItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (missionL) LoadMissionRewardItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMission interface{}, mods queries.Applicator) error {
	var slice []*Mission
	var object *Mission

	if singular {
		var ok bool
		object, ok = maybeMission.(*Mission)
		if !ok {
			object = new(Mission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMission))
			}
		}
	} else {
		s, ok := maybeMission.(*[]*Mission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &missionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &missionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mission_reward_items`),
		qm.WhereIn(`mission_reward_items.mission_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mission_reward_items")
	}

	var resultSlice []*MissionRewardItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mission_reward_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mission_reward_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mission_reward_items")
	}

	if len(missionRewardItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MissionRewardItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &missionRewardItemR{}
			}
			foreign.R.Mission = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MissionID {
				local.R.MissionRewardItems = append(local.R.MissionRewardItems, foreign)
				if foreign.R == nil {
					foreign.R = &missionRewardItemR{}
				}
				foreign.R.Mission = local
				break
			}
		}
	}

	return nil
}

// LoadUserMissions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (missionL) LoadUserMissions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMission interface{}, mods queries.Applicator) error {
	var slice []*Mission
	var object *Mission

	if singular {
		var ok bool
		object, ok = maybeMission.(*Mission)
		if !ok {
			object = new(Mission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMission))
			}
		}
	} else {
		s, ok := maybeMission.(*[]*Mission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &missionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &missionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_missions`),
		qm.WhereIn(`user_missions.mission_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_missions")
	}

	var resultSlice []*UserMission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_missions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_missions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_missions")
	}

	if len(userMissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserMissions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userMissionR{}
			}
			foreign.R.Mission = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MissionID {
				local.R.UserMissions = append(local.R.UserMissions, foreign)
				if foreign.R == nil {
					foreign.R = &userMissionR{}
				}
				foreign.R.Mission = local
				break
			}
		}
	}

	return nil
}

// SetCoinCountMission of the mission to the related item.
// Sets o.R.CoinCountMission to related.
// Adds o to related.R.Mission.
func (o *Mission) SetCoinCountMission(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CoinCountMission) error {
	var err error

	if insert {
		related.MissionID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"coin_count_missions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"mission_id"}),
			strmangle.WhereClause("\"", "\"", 2, coinCountMissionPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.MissionID = o.ID
	}

	if o.R == nil {
		o.R = &missionR{
			CoinCountMission: related,
		}
	} else {
		o.R.CoinCountMission = related
	}

	if related.R == nil {
		related.R = &coinCountMissionR{
			Mission: o,
		}
	} else {
		related.R.Mission = o
	}
	return nil
}

// SetGetItemMission of the mission to the related item.
// Sets o.R.GetItemMission to related.
// Adds o to related.R.Mission.
func (o *Mission) SetGetItemMission(ctx context.Context, exec boil.ContextExecutor, insert bool, related *GetItemMission) error {
	var err error

	if insert {
		related.MissionID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"get_item_missions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"mission_id"}),
			strmangle.WhereClause("\"", "\"", 2, getItemMissionPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.MissionID = o.ID
	}

	if o.R == nil {
		o.R = &missionR{
			GetItemMission: related,
		}
	} else {
		o.R.GetItemMission = related
	}

	if related.R == nil {
		related.R = &getItemMissionR{
			Mission: o,
		}
	} else {
		related.R.Mission = o
	}
	return nil
}

// SetLoginMission of the mission to the related item.
// Sets o.R.LoginMission to related.
// Adds o to related.R.Mission.
func (o *Mission) SetLoginMission(ctx context.Context, exec boil.ContextExecutor, insert bool, related *LoginMission) error {
	var err error

	if insert {
		related.MissionID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"login_missions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"mission_id"}),
			strmangle.WhereClause("\"", "\"", 2, loginMissionPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.MissionID = o.ID
	}

	if o.R == nil {
		o.R = &missionR{
			LoginMission: related,
		}
	} else {
		o.R.LoginMission = related
	}

	if related.R == nil {
		related.R = &loginMissionR{
			Mission: o,
		}
	} else {
		related.R.Mission = o
	}
	return nil
}

// SetMonsterKillCountMission of the mission to the related item.
// Sets o.R.MonsterKillCountMission to related.
// Adds o to related.R.Mission.
func (o *Mission) SetMonsterKillCountMission(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MonsterKillCountMission) error {
	var err error

	if insert {
		related.MissionID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"monster_kill_count_missions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"mission_id"}),
			strmangle.WhereClause("\"", "\"", 2, monsterKillCountMissionPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.MissionID = o.ID
	}

	if o.R == nil {
		o.R = &missionR{
			MonsterKillCountMission: related,
		}
	} else {
		o.R.MonsterKillCountMission = related
	}

	if related.R == nil {
		related.R = &monsterKillCountMissionR{
			Mission: o,
		}
	} else {
		related.R.Mission = o
	}
	return nil
}

// SetMonsterKillMission of the mission to the related item.
// Sets o.R.MonsterKillMission to related.
// Adds o to related.R.Mission.
func (o *Mission) SetMonsterKillMission(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MonsterKillMission) error {
	var err error

	if insert {
		related.MissionID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"monster_kill_missions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"mission_id"}),
			strmangle.WhereClause("\"", "\"", 2, monsterKillMissionPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.MissionID = o.ID
	}

	if o.R == nil {
		o.R = &missionR{
			MonsterKillMission: related,
		}
	} else {
		o.R.MonsterKillMission = related
	}

	if related.R == nil {
		related.R = &monsterKillMissionR{
			Mission: o,
		}
	} else {
		related.R.Mission = o
	}
	return nil
}

// SetMonsterLevelUpCountMission of the mission to the related item.
// Sets o.R.MonsterLevelUpCountMission to related.
// Adds o to related.R.Mission.
func (o *Mission) SetMonsterLevelUpCountMission(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MonsterLevelUpCountMission) error {
	var err error

	if insert {
		related.MissionID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"monster_level_up_count_missions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"mission_id"}),
			strmangle.WhereClause("\"", "\"", 2, monsterLevelUpCountMissionPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.MissionID = o.ID
	}

	if o.R == nil {
		o.R = &missionR{
			MonsterLevelUpCountMission: related,
		}
	} else {
		o.R.MonsterLevelUpCountMission = related
	}

	if related.R == nil {
		related.R = &monsterLevelUpCountMissionR{
			Mission: o,
		}
	} else {
		related.R.Mission = o
	}
	return nil
}

// SetMonsterLevelUpMission of the mission to the related item.
// Sets o.R.MonsterLevelUpMission to related.
// Adds o to related.R.Mission.
func (o *Mission) SetMonsterLevelUpMission(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MonsterLevelUpMission) error {
	var err error

	if insert {
		related.MissionID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"monster_level_up_missions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"mission_id"}),
			strmangle.WhereClause("\"", "\"", 2, monsterLevelUpMissionPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.MissionID = o.ID
	}

	if o.R == nil {
		o.R = &missionR{
			MonsterLevelUpMission: related,
		}
	} else {
		o.R.MonsterLevelUpMission = related
	}

	if related.R == nil {
		related.R = &monsterLevelUpMissionR{
			Mission: o,
		}
	} else {
		related.R.Mission = o
	}
	return nil
}

// AddMissionRewardCoins adds the given related objects to the existing relationships
// of the mission, optionally inserting them as new records.
// Appends related to o.R.MissionRewardCoins.
// Sets related.R.Mission appropriately.
func (o *Mission) AddMissionRewardCoins(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MissionRewardCoin) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MissionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mission_reward_coins\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mission_id"}),
				strmangle.WhereClause("\"", "\"", 2, missionRewardCoinPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MissionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &missionR{
			MissionRewardCoins: related,
		}
	} else {
		o.R.MissionRewardCoins = append(o.R.MissionRewardCoins, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &missionRewardCoinR{
				Mission: o,
			}
		} else {
			rel.R.Mission = o
		}
	}
	return nil
}

// AddMissionRewardItems adds the given related objects to the existing relationships
// of the mission, optionally inserting them as new records.
// Appends related to o.R.MissionRewardItems.
// Sets related.R.Mission appropriately.
func (o *Mission) AddMissionRewardItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MissionRewardItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MissionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mission_reward_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mission_id"}),
				strmangle.WhereClause("\"", "\"", 2, missionRewardItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MissionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &missionR{
			MissionRewardItems: related,
		}
	} else {
		o.R.MissionRewardItems = append(o.R.MissionRewardItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &missionRewardItemR{
				Mission: o,
			}
		} else {
			rel.R.Mission = o
		}
	}
	return nil
}

// AddUserMissions adds the given related objects to the existing relationships
// of the mission, optionally inserting them as new records.
// Appends related to o.R.UserMissions.
// Sets related.R.Mission appropriately.
func (o *Mission) AddUserMissions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserMission) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MissionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_missions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mission_id"}),
				strmangle.WhereClause("\"", "\"", 2, userMissionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MissionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &missionR{
			UserMissions: related,
		}
	} else {
		o.R.UserMissions = append(o.R.UserMissions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userMissionR{
				Mission: o,
			}
		} else {
			rel.R.Mission = o
		}
	}
	return nil
}

// Missions retrieves all the records using an executor.
func Missions(mods ...qm.QueryMod) missionQuery {
	mods = append(mods, qm.From("\"missions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"missions\".*"})
	}

	return missionQuery{q}
}

// FindMission retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMission(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Mission, error) {
	missionObj := &Mission{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"missions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, missionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from missions")
	}

	if err = missionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return missionObj, err
	}

	return missionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Mission) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no missions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(missionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	missionInsertCacheMut.RLock()
	cache, cached := missionInsertCache[key]
	missionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			missionAllColumns,
			missionColumnsWithDefault,
			missionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(missionType, missionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(missionType, missionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"missions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"missions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into missions")
	}

	if !cached {
		missionInsertCacheMut.Lock()
		missionInsertCache[key] = cache
		missionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Mission.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Mission) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	missionUpdateCacheMut.RLock()
	cache, cached := missionUpdateCache[key]
	missionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			missionAllColumns,
			missionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update missions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"missions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, missionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(missionType, missionMapping, append(wl, missionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update missions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for missions")
	}

	if !cached {
		missionUpdateCacheMut.Lock()
		missionUpdateCache[key] = cache
		missionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q missionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for missions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for missions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MissionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), missionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"missions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, missionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in mission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all mission")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Mission) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no missions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(missionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	missionUpsertCacheMut.RLock()
	cache, cached := missionUpsertCache[key]
	missionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			missionAllColumns,
			missionColumnsWithDefault,
			missionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			missionAllColumns,
			missionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert missions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(missionPrimaryKeyColumns))
			copy(conflict, missionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"missions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(missionType, missionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(missionType, missionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert missions")
	}

	if !cached {
		missionUpsertCacheMut.Lock()
		missionUpsertCache[key] = cache
		missionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Mission record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Mission) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Mission provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), missionPrimaryKeyMapping)
	sql := "DELETE FROM \"missions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from missions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for missions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q missionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no missionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from missions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for missions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MissionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(missionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), missionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"missions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, missionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for missions")
	}

	if len(missionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Mission) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMission(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MissionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MissionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), missionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"missions\".* FROM \"missions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, missionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MissionSlice")
	}

	*o = slice

	return nil
}

// MissionExists checks if the Mission row exists.
func MissionExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"missions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if missions exists")
	}

	return exists, nil
}

// Exists checks if the Mission row exists.
func (o *Mission) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MissionExists(ctx, exec, o.ID)
}
