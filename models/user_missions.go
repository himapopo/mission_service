// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserMission is an object representing the database table.
type UserMission struct {
	ID int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	// ユーザーID
	UserID int64 `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	// ミッションID
	MissionID int64 `boil:"mission_id" json:"mission_id" toml:"mission_id" yaml:"mission_id"`
	// ミッション完了日
	CompletedAt null.Time `boil:"completed_at" json:"completed_at,omitempty" toml:"completed_at" yaml:"completed_at,omitempty"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *userMissionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userMissionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserMissionColumns = struct {
	ID          string
	UserID      string
	MissionID   string
	CompletedAt string
	UpdatedAt   string
	CreatedAt   string
}{
	ID:          "id",
	UserID:      "user_id",
	MissionID:   "mission_id",
	CompletedAt: "completed_at",
	UpdatedAt:   "updated_at",
	CreatedAt:   "created_at",
}

var UserMissionTableColumns = struct {
	ID          string
	UserID      string
	MissionID   string
	CompletedAt string
	UpdatedAt   string
	CreatedAt   string
}{
	ID:          "user_missions.id",
	UserID:      "user_missions.user_id",
	MissionID:   "user_missions.mission_id",
	CompletedAt: "user_missions.completed_at",
	UpdatedAt:   "user_missions.updated_at",
	CreatedAt:   "user_missions.created_at",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var UserMissionWhere = struct {
	ID          whereHelperint64
	UserID      whereHelperint64
	MissionID   whereHelperint64
	CompletedAt whereHelpernull_Time
	UpdatedAt   whereHelpertime_Time
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint64{field: "\"user_missions\".\"id\""},
	UserID:      whereHelperint64{field: "\"user_missions\".\"user_id\""},
	MissionID:   whereHelperint64{field: "\"user_missions\".\"mission_id\""},
	CompletedAt: whereHelpernull_Time{field: "\"user_missions\".\"completed_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"user_missions\".\"updated_at\""},
	CreatedAt:   whereHelpertime_Time{field: "\"user_missions\".\"created_at\""},
}

// UserMissionRels is where relationship names are stored.
var UserMissionRels = struct {
	Mission               string
	User                  string
	UserMissionProgresses string
}{
	Mission:               "Mission",
	User:                  "User",
	UserMissionProgresses: "UserMissionProgresses",
}

// userMissionR is where relationships are stored.
type userMissionR struct {
	Mission               *Mission                 `boil:"Mission" json:"Mission" toml:"Mission" yaml:"Mission"`
	User                  *User                    `boil:"User" json:"User" toml:"User" yaml:"User"`
	UserMissionProgresses UserMissionProgressSlice `boil:"UserMissionProgresses" json:"UserMissionProgresses" toml:"UserMissionProgresses" yaml:"UserMissionProgresses"`
}

// NewStruct creates a new relationship struct
func (*userMissionR) NewStruct() *userMissionR {
	return &userMissionR{}
}

func (r *userMissionR) GetMission() *Mission {
	if r == nil {
		return nil
	}
	return r.Mission
}

func (r *userMissionR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *userMissionR) GetUserMissionProgresses() UserMissionProgressSlice {
	if r == nil {
		return nil
	}
	return r.UserMissionProgresses
}

// userMissionL is where Load methods for each relationship are stored.
type userMissionL struct{}

var (
	userMissionAllColumns            = []string{"id", "user_id", "mission_id", "completed_at", "updated_at", "created_at"}
	userMissionColumnsWithoutDefault = []string{"user_id", "mission_id"}
	userMissionColumnsWithDefault    = []string{"id", "completed_at", "updated_at", "created_at"}
	userMissionPrimaryKeyColumns     = []string{"id"}
	userMissionGeneratedColumns      = []string{}
)

type (
	// UserMissionSlice is an alias for a slice of pointers to UserMission.
	// This should almost always be used instead of []UserMission.
	UserMissionSlice []*UserMission
	// UserMissionHook is the signature for custom UserMission hook methods
	UserMissionHook func(context.Context, boil.ContextExecutor, *UserMission) error

	userMissionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userMissionType                 = reflect.TypeOf(&UserMission{})
	userMissionMapping              = queries.MakeStructMapping(userMissionType)
	userMissionPrimaryKeyMapping, _ = queries.BindMapping(userMissionType, userMissionMapping, userMissionPrimaryKeyColumns)
	userMissionInsertCacheMut       sync.RWMutex
	userMissionInsertCache          = make(map[string]insertCache)
	userMissionUpdateCacheMut       sync.RWMutex
	userMissionUpdateCache          = make(map[string]updateCache)
	userMissionUpsertCacheMut       sync.RWMutex
	userMissionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userMissionAfterSelectHooks []UserMissionHook

var userMissionBeforeInsertHooks []UserMissionHook
var userMissionAfterInsertHooks []UserMissionHook

var userMissionBeforeUpdateHooks []UserMissionHook
var userMissionAfterUpdateHooks []UserMissionHook

var userMissionBeforeDeleteHooks []UserMissionHook
var userMissionAfterDeleteHooks []UserMissionHook

var userMissionBeforeUpsertHooks []UserMissionHook
var userMissionAfterUpsertHooks []UserMissionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserMission) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userMissionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserMission) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userMissionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserMission) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userMissionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserMission) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userMissionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserMission) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userMissionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserMission) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userMissionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserMission) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userMissionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserMission) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userMissionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserMission) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userMissionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserMissionHook registers your hook function for all future operations.
func AddUserMissionHook(hookPoint boil.HookPoint, userMissionHook UserMissionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userMissionAfterSelectHooks = append(userMissionAfterSelectHooks, userMissionHook)
	case boil.BeforeInsertHook:
		userMissionBeforeInsertHooks = append(userMissionBeforeInsertHooks, userMissionHook)
	case boil.AfterInsertHook:
		userMissionAfterInsertHooks = append(userMissionAfterInsertHooks, userMissionHook)
	case boil.BeforeUpdateHook:
		userMissionBeforeUpdateHooks = append(userMissionBeforeUpdateHooks, userMissionHook)
	case boil.AfterUpdateHook:
		userMissionAfterUpdateHooks = append(userMissionAfterUpdateHooks, userMissionHook)
	case boil.BeforeDeleteHook:
		userMissionBeforeDeleteHooks = append(userMissionBeforeDeleteHooks, userMissionHook)
	case boil.AfterDeleteHook:
		userMissionAfterDeleteHooks = append(userMissionAfterDeleteHooks, userMissionHook)
	case boil.BeforeUpsertHook:
		userMissionBeforeUpsertHooks = append(userMissionBeforeUpsertHooks, userMissionHook)
	case boil.AfterUpsertHook:
		userMissionAfterUpsertHooks = append(userMissionAfterUpsertHooks, userMissionHook)
	}
}

// One returns a single userMission record from the query.
func (q userMissionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserMission, error) {
	o := &UserMission{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_missions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserMission records from the query.
func (q userMissionQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserMissionSlice, error) {
	var o []*UserMission

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserMission slice")
	}

	if len(userMissionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserMission records in the query.
func (q userMissionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_missions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userMissionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_missions exists")
	}

	return count > 0, nil
}

// Mission pointed to by the foreign key.
func (o *UserMission) Mission(mods ...qm.QueryMod) missionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MissionID),
	}

	queryMods = append(queryMods, mods...)

	return Missions(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserMission) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// UserMissionProgresses retrieves all the user_mission_progress's UserMissionProgresses with an executor.
func (o *UserMission) UserMissionProgresses(mods ...qm.QueryMod) userMissionProgressQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_mission_progresses\".\"user_mission_id\"=?", o.ID),
	)

	return UserMissionProgresses(queryMods...)
}

// LoadMission allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userMissionL) LoadMission(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserMission interface{}, mods queries.Applicator) error {
	var slice []*UserMission
	var object *UserMission

	if singular {
		var ok bool
		object, ok = maybeUserMission.(*UserMission)
		if !ok {
			object = new(UserMission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserMission))
			}
		}
	} else {
		s, ok := maybeUserMission.(*[]*UserMission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserMission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userMissionR{}
		}
		args = append(args, object.MissionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userMissionR{}
			}

			for _, a := range args {
				if a == obj.MissionID {
					continue Outer
				}
			}

			args = append(args, obj.MissionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`missions`),
		qm.WhereIn(`missions.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mission")
	}

	var resultSlice []*Mission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mission")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for missions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for missions")
	}

	if len(missionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mission = foreign
		if foreign.R == nil {
			foreign.R = &missionR{}
		}
		foreign.R.UserMissions = append(foreign.R.UserMissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MissionID == foreign.ID {
				local.R.Mission = foreign
				if foreign.R == nil {
					foreign.R = &missionR{}
				}
				foreign.R.UserMissions = append(foreign.R.UserMissions, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userMissionL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserMission interface{}, mods queries.Applicator) error {
	var slice []*UserMission
	var object *UserMission

	if singular {
		var ok bool
		object, ok = maybeUserMission.(*UserMission)
		if !ok {
			object = new(UserMission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserMission))
			}
		}
	} else {
		s, ok := maybeUserMission.(*[]*UserMission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserMission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userMissionR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userMissionR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserMissions = append(foreign.R.UserMissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserMissions = append(foreign.R.UserMissions, local)
				break
			}
		}
	}

	return nil
}

// LoadUserMissionProgresses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userMissionL) LoadUserMissionProgresses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserMission interface{}, mods queries.Applicator) error {
	var slice []*UserMission
	var object *UserMission

	if singular {
		var ok bool
		object, ok = maybeUserMission.(*UserMission)
		if !ok {
			object = new(UserMission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserMission))
			}
		}
	} else {
		s, ok := maybeUserMission.(*[]*UserMission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserMission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userMissionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userMissionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_mission_progresses`),
		qm.WhereIn(`user_mission_progresses.user_mission_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_mission_progresses")
	}

	var resultSlice []*UserMissionProgress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_mission_progresses")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_mission_progresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_mission_progresses")
	}

	if len(userMissionProgressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserMissionProgresses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userMissionProgressR{}
			}
			foreign.R.UserMission = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserMissionID {
				local.R.UserMissionProgresses = append(local.R.UserMissionProgresses, foreign)
				if foreign.R == nil {
					foreign.R = &userMissionProgressR{}
				}
				foreign.R.UserMission = local
				break
			}
		}
	}

	return nil
}

// SetMission of the userMission to the related item.
// Sets o.R.Mission to related.
// Adds o to related.R.UserMissions.
func (o *UserMission) SetMission(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Mission) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_missions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mission_id"}),
		strmangle.WhereClause("\"", "\"", 2, userMissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MissionID = related.ID
	if o.R == nil {
		o.R = &userMissionR{
			Mission: related,
		}
	} else {
		o.R.Mission = related
	}

	if related.R == nil {
		related.R = &missionR{
			UserMissions: UserMissionSlice{o},
		}
	} else {
		related.R.UserMissions = append(related.R.UserMissions, o)
	}

	return nil
}

// SetUser of the userMission to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserMissions.
func (o *UserMission) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_missions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userMissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userMissionR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserMissions: UserMissionSlice{o},
		}
	} else {
		related.R.UserMissions = append(related.R.UserMissions, o)
	}

	return nil
}

// AddUserMissionProgresses adds the given related objects to the existing relationships
// of the user_mission, optionally inserting them as new records.
// Appends related to o.R.UserMissionProgresses.
// Sets related.R.UserMission appropriately.
func (o *UserMission) AddUserMissionProgresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserMissionProgress) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserMissionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_mission_progresses\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_mission_id"}),
				strmangle.WhereClause("\"", "\"", 2, userMissionProgressPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserMissionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userMissionR{
			UserMissionProgresses: related,
		}
	} else {
		o.R.UserMissionProgresses = append(o.R.UserMissionProgresses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userMissionProgressR{
				UserMission: o,
			}
		} else {
			rel.R.UserMission = o
		}
	}
	return nil
}

// UserMissions retrieves all the records using an executor.
func UserMissions(mods ...qm.QueryMod) userMissionQuery {
	mods = append(mods, qm.From("\"user_missions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_missions\".*"})
	}

	return userMissionQuery{q}
}

// FindUserMission retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserMission(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*UserMission, error) {
	userMissionObj := &UserMission{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_missions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userMissionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_missions")
	}

	if err = userMissionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userMissionObj, err
	}

	return userMissionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserMission) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_missions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userMissionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userMissionInsertCacheMut.RLock()
	cache, cached := userMissionInsertCache[key]
	userMissionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userMissionAllColumns,
			userMissionColumnsWithDefault,
			userMissionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userMissionType, userMissionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userMissionType, userMissionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_missions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_missions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_missions")
	}

	if !cached {
		userMissionInsertCacheMut.Lock()
		userMissionInsertCache[key] = cache
		userMissionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserMission.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserMission) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userMissionUpdateCacheMut.RLock()
	cache, cached := userMissionUpdateCache[key]
	userMissionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userMissionAllColumns,
			userMissionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_missions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_missions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userMissionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userMissionType, userMissionMapping, append(wl, userMissionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_missions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_missions")
	}

	if !cached {
		userMissionUpdateCacheMut.Lock()
		userMissionUpdateCache[key] = cache
		userMissionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userMissionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_missions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_missions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserMissionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userMissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_missions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userMissionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userMission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userMission")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserMission) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_missions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userMissionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userMissionUpsertCacheMut.RLock()
	cache, cached := userMissionUpsertCache[key]
	userMissionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userMissionAllColumns,
			userMissionColumnsWithDefault,
			userMissionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userMissionAllColumns,
			userMissionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_missions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userMissionPrimaryKeyColumns))
			copy(conflict, userMissionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_missions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userMissionType, userMissionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userMissionType, userMissionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_missions")
	}

	if !cached {
		userMissionUpsertCacheMut.Lock()
		userMissionUpsertCache[key] = cache
		userMissionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserMission record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserMission) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserMission provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userMissionPrimaryKeyMapping)
	sql := "DELETE FROM \"user_missions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_missions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_missions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userMissionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userMissionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_missions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_missions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserMissionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userMissionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userMissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_missions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userMissionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userMission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_missions")
	}

	if len(userMissionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserMission) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserMission(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserMissionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserMissionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userMissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_missions\".* FROM \"user_missions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userMissionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserMissionSlice")
	}

	*o = slice

	return nil
}

// UserMissionExists checks if the UserMission row exists.
func UserMissionExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_missions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_missions exists")
	}

	return exists, nil
}

// Exists checks if the UserMission row exists.
func (o *UserMission) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserMissionExists(ctx, exec, o.ID)
}
