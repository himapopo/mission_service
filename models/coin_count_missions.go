// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CoinCountMission is an object representing the database table.
type CoinCountMission struct {
	ID int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	// ミッションID
	MissionID int64 `boil:"mission_id" json:"mission_id" toml:"mission_id" yaml:"mission_id"`
	// 獲得必要コイン数
	CoinCount int64     `boil:"coin_count" json:"coin_count" toml:"coin_count" yaml:"coin_count"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *coinCountMissionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L coinCountMissionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CoinCountMissionColumns = struct {
	ID        string
	MissionID string
	CoinCount string
	UpdatedAt string
	CreatedAt string
}{
	ID:        "id",
	MissionID: "mission_id",
	CoinCount: "coin_count",
	UpdatedAt: "updated_at",
	CreatedAt: "created_at",
}

var CoinCountMissionTableColumns = struct {
	ID        string
	MissionID string
	CoinCount string
	UpdatedAt string
	CreatedAt string
}{
	ID:        "coin_count_missions.id",
	MissionID: "coin_count_missions.mission_id",
	CoinCount: "coin_count_missions.coin_count",
	UpdatedAt: "coin_count_missions.updated_at",
	CreatedAt: "coin_count_missions.created_at",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CoinCountMissionWhere = struct {
	ID        whereHelperint64
	MissionID whereHelperint64
	CoinCount whereHelperint64
	UpdatedAt whereHelpertime_Time
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "\"coin_count_missions\".\"id\""},
	MissionID: whereHelperint64{field: "\"coin_count_missions\".\"mission_id\""},
	CoinCount: whereHelperint64{field: "\"coin_count_missions\".\"coin_count\""},
	UpdatedAt: whereHelpertime_Time{field: "\"coin_count_missions\".\"updated_at\""},
	CreatedAt: whereHelpertime_Time{field: "\"coin_count_missions\".\"created_at\""},
}

// CoinCountMissionRels is where relationship names are stored.
var CoinCountMissionRels = struct {
	Mission string
}{
	Mission: "Mission",
}

// coinCountMissionR is where relationships are stored.
type coinCountMissionR struct {
	Mission *Mission `boil:"Mission" json:"Mission" toml:"Mission" yaml:"Mission"`
}

// NewStruct creates a new relationship struct
func (*coinCountMissionR) NewStruct() *coinCountMissionR {
	return &coinCountMissionR{}
}

func (r *coinCountMissionR) GetMission() *Mission {
	if r == nil {
		return nil
	}
	return r.Mission
}

// coinCountMissionL is where Load methods for each relationship are stored.
type coinCountMissionL struct{}

var (
	coinCountMissionAllColumns            = []string{"id", "mission_id", "coin_count", "updated_at", "created_at"}
	coinCountMissionColumnsWithoutDefault = []string{"mission_id", "coin_count"}
	coinCountMissionColumnsWithDefault    = []string{"id", "updated_at", "created_at"}
	coinCountMissionPrimaryKeyColumns     = []string{"id"}
	coinCountMissionGeneratedColumns      = []string{}
)

type (
	// CoinCountMissionSlice is an alias for a slice of pointers to CoinCountMission.
	// This should almost always be used instead of []CoinCountMission.
	CoinCountMissionSlice []*CoinCountMission
	// CoinCountMissionHook is the signature for custom CoinCountMission hook methods
	CoinCountMissionHook func(context.Context, boil.ContextExecutor, *CoinCountMission) error

	coinCountMissionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	coinCountMissionType                 = reflect.TypeOf(&CoinCountMission{})
	coinCountMissionMapping              = queries.MakeStructMapping(coinCountMissionType)
	coinCountMissionPrimaryKeyMapping, _ = queries.BindMapping(coinCountMissionType, coinCountMissionMapping, coinCountMissionPrimaryKeyColumns)
	coinCountMissionInsertCacheMut       sync.RWMutex
	coinCountMissionInsertCache          = make(map[string]insertCache)
	coinCountMissionUpdateCacheMut       sync.RWMutex
	coinCountMissionUpdateCache          = make(map[string]updateCache)
	coinCountMissionUpsertCacheMut       sync.RWMutex
	coinCountMissionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var coinCountMissionAfterSelectHooks []CoinCountMissionHook

var coinCountMissionBeforeInsertHooks []CoinCountMissionHook
var coinCountMissionAfterInsertHooks []CoinCountMissionHook

var coinCountMissionBeforeUpdateHooks []CoinCountMissionHook
var coinCountMissionAfterUpdateHooks []CoinCountMissionHook

var coinCountMissionBeforeDeleteHooks []CoinCountMissionHook
var coinCountMissionAfterDeleteHooks []CoinCountMissionHook

var coinCountMissionBeforeUpsertHooks []CoinCountMissionHook
var coinCountMissionAfterUpsertHooks []CoinCountMissionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CoinCountMission) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range coinCountMissionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CoinCountMission) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range coinCountMissionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CoinCountMission) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range coinCountMissionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CoinCountMission) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range coinCountMissionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CoinCountMission) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range coinCountMissionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CoinCountMission) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range coinCountMissionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CoinCountMission) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range coinCountMissionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CoinCountMission) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range coinCountMissionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CoinCountMission) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range coinCountMissionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCoinCountMissionHook registers your hook function for all future operations.
func AddCoinCountMissionHook(hookPoint boil.HookPoint, coinCountMissionHook CoinCountMissionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		coinCountMissionAfterSelectHooks = append(coinCountMissionAfterSelectHooks, coinCountMissionHook)
	case boil.BeforeInsertHook:
		coinCountMissionBeforeInsertHooks = append(coinCountMissionBeforeInsertHooks, coinCountMissionHook)
	case boil.AfterInsertHook:
		coinCountMissionAfterInsertHooks = append(coinCountMissionAfterInsertHooks, coinCountMissionHook)
	case boil.BeforeUpdateHook:
		coinCountMissionBeforeUpdateHooks = append(coinCountMissionBeforeUpdateHooks, coinCountMissionHook)
	case boil.AfterUpdateHook:
		coinCountMissionAfterUpdateHooks = append(coinCountMissionAfterUpdateHooks, coinCountMissionHook)
	case boil.BeforeDeleteHook:
		coinCountMissionBeforeDeleteHooks = append(coinCountMissionBeforeDeleteHooks, coinCountMissionHook)
	case boil.AfterDeleteHook:
		coinCountMissionAfterDeleteHooks = append(coinCountMissionAfterDeleteHooks, coinCountMissionHook)
	case boil.BeforeUpsertHook:
		coinCountMissionBeforeUpsertHooks = append(coinCountMissionBeforeUpsertHooks, coinCountMissionHook)
	case boil.AfterUpsertHook:
		coinCountMissionAfterUpsertHooks = append(coinCountMissionAfterUpsertHooks, coinCountMissionHook)
	}
}

// One returns a single coinCountMission record from the query.
func (q coinCountMissionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CoinCountMission, error) {
	o := &CoinCountMission{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for coin_count_missions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CoinCountMission records from the query.
func (q coinCountMissionQuery) All(ctx context.Context, exec boil.ContextExecutor) (CoinCountMissionSlice, error) {
	var o []*CoinCountMission

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CoinCountMission slice")
	}

	if len(coinCountMissionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CoinCountMission records in the query.
func (q coinCountMissionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count coin_count_missions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q coinCountMissionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if coin_count_missions exists")
	}

	return count > 0, nil
}

// Mission pointed to by the foreign key.
func (o *CoinCountMission) Mission(mods ...qm.QueryMod) missionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MissionID),
	}

	queryMods = append(queryMods, mods...)

	return Missions(queryMods...)
}

// LoadMission allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (coinCountMissionL) LoadMission(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCoinCountMission interface{}, mods queries.Applicator) error {
	var slice []*CoinCountMission
	var object *CoinCountMission

	if singular {
		var ok bool
		object, ok = maybeCoinCountMission.(*CoinCountMission)
		if !ok {
			object = new(CoinCountMission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCoinCountMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCoinCountMission))
			}
		}
	} else {
		s, ok := maybeCoinCountMission.(*[]*CoinCountMission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCoinCountMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCoinCountMission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &coinCountMissionR{}
		}
		args = append(args, object.MissionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &coinCountMissionR{}
			}

			for _, a := range args {
				if a == obj.MissionID {
					continue Outer
				}
			}

			args = append(args, obj.MissionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`missions`),
		qm.WhereIn(`missions.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mission")
	}

	var resultSlice []*Mission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mission")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for missions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for missions")
	}

	if len(missionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mission = foreign
		if foreign.R == nil {
			foreign.R = &missionR{}
		}
		foreign.R.CoinCountMission = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MissionID == foreign.ID {
				local.R.Mission = foreign
				if foreign.R == nil {
					foreign.R = &missionR{}
				}
				foreign.R.CoinCountMission = local
				break
			}
		}
	}

	return nil
}

// SetMission of the coinCountMission to the related item.
// Sets o.R.Mission to related.
// Adds o to related.R.CoinCountMission.
func (o *CoinCountMission) SetMission(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Mission) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"coin_count_missions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mission_id"}),
		strmangle.WhereClause("\"", "\"", 2, coinCountMissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MissionID = related.ID
	if o.R == nil {
		o.R = &coinCountMissionR{
			Mission: related,
		}
	} else {
		o.R.Mission = related
	}

	if related.R == nil {
		related.R = &missionR{
			CoinCountMission: o,
		}
	} else {
		related.R.CoinCountMission = o
	}

	return nil
}

// CoinCountMissions retrieves all the records using an executor.
func CoinCountMissions(mods ...qm.QueryMod) coinCountMissionQuery {
	mods = append(mods, qm.From("\"coin_count_missions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"coin_count_missions\".*"})
	}

	return coinCountMissionQuery{q}
}

// FindCoinCountMission retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCoinCountMission(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CoinCountMission, error) {
	coinCountMissionObj := &CoinCountMission{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"coin_count_missions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, coinCountMissionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from coin_count_missions")
	}

	if err = coinCountMissionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return coinCountMissionObj, err
	}

	return coinCountMissionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CoinCountMission) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no coin_count_missions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(coinCountMissionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	coinCountMissionInsertCacheMut.RLock()
	cache, cached := coinCountMissionInsertCache[key]
	coinCountMissionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			coinCountMissionAllColumns,
			coinCountMissionColumnsWithDefault,
			coinCountMissionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(coinCountMissionType, coinCountMissionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(coinCountMissionType, coinCountMissionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"coin_count_missions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"coin_count_missions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into coin_count_missions")
	}

	if !cached {
		coinCountMissionInsertCacheMut.Lock()
		coinCountMissionInsertCache[key] = cache
		coinCountMissionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CoinCountMission.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CoinCountMission) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	coinCountMissionUpdateCacheMut.RLock()
	cache, cached := coinCountMissionUpdateCache[key]
	coinCountMissionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			coinCountMissionAllColumns,
			coinCountMissionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update coin_count_missions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"coin_count_missions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, coinCountMissionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(coinCountMissionType, coinCountMissionMapping, append(wl, coinCountMissionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update coin_count_missions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for coin_count_missions")
	}

	if !cached {
		coinCountMissionUpdateCacheMut.Lock()
		coinCountMissionUpdateCache[key] = cache
		coinCountMissionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q coinCountMissionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for coin_count_missions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for coin_count_missions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CoinCountMissionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), coinCountMissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"coin_count_missions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, coinCountMissionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in coinCountMission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all coinCountMission")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CoinCountMission) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no coin_count_missions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(coinCountMissionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	coinCountMissionUpsertCacheMut.RLock()
	cache, cached := coinCountMissionUpsertCache[key]
	coinCountMissionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			coinCountMissionAllColumns,
			coinCountMissionColumnsWithDefault,
			coinCountMissionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			coinCountMissionAllColumns,
			coinCountMissionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert coin_count_missions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(coinCountMissionPrimaryKeyColumns))
			copy(conflict, coinCountMissionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"coin_count_missions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(coinCountMissionType, coinCountMissionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(coinCountMissionType, coinCountMissionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert coin_count_missions")
	}

	if !cached {
		coinCountMissionUpsertCacheMut.Lock()
		coinCountMissionUpsertCache[key] = cache
		coinCountMissionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CoinCountMission record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CoinCountMission) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CoinCountMission provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), coinCountMissionPrimaryKeyMapping)
	sql := "DELETE FROM \"coin_count_missions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from coin_count_missions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for coin_count_missions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q coinCountMissionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no coinCountMissionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from coin_count_missions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for coin_count_missions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CoinCountMissionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(coinCountMissionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), coinCountMissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"coin_count_missions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, coinCountMissionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from coinCountMission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for coin_count_missions")
	}

	if len(coinCountMissionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CoinCountMission) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCoinCountMission(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CoinCountMissionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CoinCountMissionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), coinCountMissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"coin_count_missions\".* FROM \"coin_count_missions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, coinCountMissionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CoinCountMissionSlice")
	}

	*o = slice

	return nil
}

// CoinCountMissionExists checks if the CoinCountMission row exists.
func CoinCountMissionExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"coin_count_missions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if coin_count_missions exists")
	}

	return exists, nil
}

// Exists checks if the CoinCountMission row exists.
func (o *CoinCountMission) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CoinCountMissionExists(ctx, exec, o.ID)
}
