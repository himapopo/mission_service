// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MonsterLevelUpMission is an object representing the database table.
type MonsterLevelUpMission struct {
	ID int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	// ミッションID
	MissionID int64 `boil:"mission_id" json:"mission_id" toml:"mission_id" yaml:"mission_id"`
	// 対象モンスターID
	MonsterID int64 `boil:"monster_id" json:"monster_id" toml:"monster_id" yaml:"monster_id"`
	// 対象のレベル
	Level     int       `boil:"level" json:"level" toml:"level" yaml:"level"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *monsterLevelUpMissionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L monsterLevelUpMissionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MonsterLevelUpMissionColumns = struct {
	ID        string
	MissionID string
	MonsterID string
	Level     string
	UpdatedAt string
	CreatedAt string
}{
	ID:        "id",
	MissionID: "mission_id",
	MonsterID: "monster_id",
	Level:     "level",
	UpdatedAt: "updated_at",
	CreatedAt: "created_at",
}

var MonsterLevelUpMissionTableColumns = struct {
	ID        string
	MissionID string
	MonsterID string
	Level     string
	UpdatedAt string
	CreatedAt string
}{
	ID:        "monster_level_up_missions.id",
	MissionID: "monster_level_up_missions.mission_id",
	MonsterID: "monster_level_up_missions.monster_id",
	Level:     "monster_level_up_missions.level",
	UpdatedAt: "monster_level_up_missions.updated_at",
	CreatedAt: "monster_level_up_missions.created_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var MonsterLevelUpMissionWhere = struct {
	ID        whereHelperint64
	MissionID whereHelperint64
	MonsterID whereHelperint64
	Level     whereHelperint
	UpdatedAt whereHelpertime_Time
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "\"monster_level_up_missions\".\"id\""},
	MissionID: whereHelperint64{field: "\"monster_level_up_missions\".\"mission_id\""},
	MonsterID: whereHelperint64{field: "\"monster_level_up_missions\".\"monster_id\""},
	Level:     whereHelperint{field: "\"monster_level_up_missions\".\"level\""},
	UpdatedAt: whereHelpertime_Time{field: "\"monster_level_up_missions\".\"updated_at\""},
	CreatedAt: whereHelpertime_Time{field: "\"monster_level_up_missions\".\"created_at\""},
}

// MonsterLevelUpMissionRels is where relationship names are stored.
var MonsterLevelUpMissionRels = struct {
	Mission string
	Monster string
}{
	Mission: "Mission",
	Monster: "Monster",
}

// monsterLevelUpMissionR is where relationships are stored.
type monsterLevelUpMissionR struct {
	Mission *Mission `boil:"Mission" json:"Mission" toml:"Mission" yaml:"Mission"`
	Monster *Monster `boil:"Monster" json:"Monster" toml:"Monster" yaml:"Monster"`
}

// NewStruct creates a new relationship struct
func (*monsterLevelUpMissionR) NewStruct() *monsterLevelUpMissionR {
	return &monsterLevelUpMissionR{}
}

func (r *monsterLevelUpMissionR) GetMission() *Mission {
	if r == nil {
		return nil
	}
	return r.Mission
}

func (r *monsterLevelUpMissionR) GetMonster() *Monster {
	if r == nil {
		return nil
	}
	return r.Monster
}

// monsterLevelUpMissionL is where Load methods for each relationship are stored.
type monsterLevelUpMissionL struct{}

var (
	monsterLevelUpMissionAllColumns            = []string{"id", "mission_id", "monster_id", "level", "updated_at", "created_at"}
	monsterLevelUpMissionColumnsWithoutDefault = []string{"mission_id", "monster_id", "level"}
	monsterLevelUpMissionColumnsWithDefault    = []string{"id", "updated_at", "created_at"}
	monsterLevelUpMissionPrimaryKeyColumns     = []string{"id"}
	monsterLevelUpMissionGeneratedColumns      = []string{}
)

type (
	// MonsterLevelUpMissionSlice is an alias for a slice of pointers to MonsterLevelUpMission.
	// This should almost always be used instead of []MonsterLevelUpMission.
	MonsterLevelUpMissionSlice []*MonsterLevelUpMission
	// MonsterLevelUpMissionHook is the signature for custom MonsterLevelUpMission hook methods
	MonsterLevelUpMissionHook func(context.Context, boil.ContextExecutor, *MonsterLevelUpMission) error

	monsterLevelUpMissionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	monsterLevelUpMissionType                 = reflect.TypeOf(&MonsterLevelUpMission{})
	monsterLevelUpMissionMapping              = queries.MakeStructMapping(monsterLevelUpMissionType)
	monsterLevelUpMissionPrimaryKeyMapping, _ = queries.BindMapping(monsterLevelUpMissionType, monsterLevelUpMissionMapping, monsterLevelUpMissionPrimaryKeyColumns)
	monsterLevelUpMissionInsertCacheMut       sync.RWMutex
	monsterLevelUpMissionInsertCache          = make(map[string]insertCache)
	monsterLevelUpMissionUpdateCacheMut       sync.RWMutex
	monsterLevelUpMissionUpdateCache          = make(map[string]updateCache)
	monsterLevelUpMissionUpsertCacheMut       sync.RWMutex
	monsterLevelUpMissionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var monsterLevelUpMissionAfterSelectHooks []MonsterLevelUpMissionHook

var monsterLevelUpMissionBeforeInsertHooks []MonsterLevelUpMissionHook
var monsterLevelUpMissionAfterInsertHooks []MonsterLevelUpMissionHook

var monsterLevelUpMissionBeforeUpdateHooks []MonsterLevelUpMissionHook
var monsterLevelUpMissionAfterUpdateHooks []MonsterLevelUpMissionHook

var monsterLevelUpMissionBeforeDeleteHooks []MonsterLevelUpMissionHook
var monsterLevelUpMissionAfterDeleteHooks []MonsterLevelUpMissionHook

var monsterLevelUpMissionBeforeUpsertHooks []MonsterLevelUpMissionHook
var monsterLevelUpMissionAfterUpsertHooks []MonsterLevelUpMissionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MonsterLevelUpMission) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monsterLevelUpMissionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MonsterLevelUpMission) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monsterLevelUpMissionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MonsterLevelUpMission) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monsterLevelUpMissionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MonsterLevelUpMission) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monsterLevelUpMissionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MonsterLevelUpMission) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monsterLevelUpMissionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MonsterLevelUpMission) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monsterLevelUpMissionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MonsterLevelUpMission) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monsterLevelUpMissionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MonsterLevelUpMission) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monsterLevelUpMissionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MonsterLevelUpMission) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monsterLevelUpMissionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMonsterLevelUpMissionHook registers your hook function for all future operations.
func AddMonsterLevelUpMissionHook(hookPoint boil.HookPoint, monsterLevelUpMissionHook MonsterLevelUpMissionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		monsterLevelUpMissionAfterSelectHooks = append(monsterLevelUpMissionAfterSelectHooks, monsterLevelUpMissionHook)
	case boil.BeforeInsertHook:
		monsterLevelUpMissionBeforeInsertHooks = append(monsterLevelUpMissionBeforeInsertHooks, monsterLevelUpMissionHook)
	case boil.AfterInsertHook:
		monsterLevelUpMissionAfterInsertHooks = append(monsterLevelUpMissionAfterInsertHooks, monsterLevelUpMissionHook)
	case boil.BeforeUpdateHook:
		monsterLevelUpMissionBeforeUpdateHooks = append(monsterLevelUpMissionBeforeUpdateHooks, monsterLevelUpMissionHook)
	case boil.AfterUpdateHook:
		monsterLevelUpMissionAfterUpdateHooks = append(monsterLevelUpMissionAfterUpdateHooks, monsterLevelUpMissionHook)
	case boil.BeforeDeleteHook:
		monsterLevelUpMissionBeforeDeleteHooks = append(monsterLevelUpMissionBeforeDeleteHooks, monsterLevelUpMissionHook)
	case boil.AfterDeleteHook:
		monsterLevelUpMissionAfterDeleteHooks = append(monsterLevelUpMissionAfterDeleteHooks, monsterLevelUpMissionHook)
	case boil.BeforeUpsertHook:
		monsterLevelUpMissionBeforeUpsertHooks = append(monsterLevelUpMissionBeforeUpsertHooks, monsterLevelUpMissionHook)
	case boil.AfterUpsertHook:
		monsterLevelUpMissionAfterUpsertHooks = append(monsterLevelUpMissionAfterUpsertHooks, monsterLevelUpMissionHook)
	}
}

// One returns a single monsterLevelUpMission record from the query.
func (q monsterLevelUpMissionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MonsterLevelUpMission, error) {
	o := &MonsterLevelUpMission{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for monster_level_up_missions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MonsterLevelUpMission records from the query.
func (q monsterLevelUpMissionQuery) All(ctx context.Context, exec boil.ContextExecutor) (MonsterLevelUpMissionSlice, error) {
	var o []*MonsterLevelUpMission

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MonsterLevelUpMission slice")
	}

	if len(monsterLevelUpMissionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MonsterLevelUpMission records in the query.
func (q monsterLevelUpMissionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count monster_level_up_missions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q monsterLevelUpMissionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if monster_level_up_missions exists")
	}

	return count > 0, nil
}

// Mission pointed to by the foreign key.
func (o *MonsterLevelUpMission) Mission(mods ...qm.QueryMod) missionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MissionID),
	}

	queryMods = append(queryMods, mods...)

	return Missions(queryMods...)
}

// Monster pointed to by the foreign key.
func (o *MonsterLevelUpMission) Monster(mods ...qm.QueryMod) monsterQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MonsterID),
	}

	queryMods = append(queryMods, mods...)

	return Monsters(queryMods...)
}

// LoadMission allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (monsterLevelUpMissionL) LoadMission(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMonsterLevelUpMission interface{}, mods queries.Applicator) error {
	var slice []*MonsterLevelUpMission
	var object *MonsterLevelUpMission

	if singular {
		var ok bool
		object, ok = maybeMonsterLevelUpMission.(*MonsterLevelUpMission)
		if !ok {
			object = new(MonsterLevelUpMission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMonsterLevelUpMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMonsterLevelUpMission))
			}
		}
	} else {
		s, ok := maybeMonsterLevelUpMission.(*[]*MonsterLevelUpMission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMonsterLevelUpMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMonsterLevelUpMission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &monsterLevelUpMissionR{}
		}
		args = append(args, object.MissionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &monsterLevelUpMissionR{}
			}

			for _, a := range args {
				if a == obj.MissionID {
					continue Outer
				}
			}

			args = append(args, obj.MissionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`missions`),
		qm.WhereIn(`missions.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mission")
	}

	var resultSlice []*Mission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mission")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for missions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for missions")
	}

	if len(missionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mission = foreign
		if foreign.R == nil {
			foreign.R = &missionR{}
		}
		foreign.R.MonsterLevelUpMission = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MissionID == foreign.ID {
				local.R.Mission = foreign
				if foreign.R == nil {
					foreign.R = &missionR{}
				}
				foreign.R.MonsterLevelUpMission = local
				break
			}
		}
	}

	return nil
}

// LoadMonster allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (monsterLevelUpMissionL) LoadMonster(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMonsterLevelUpMission interface{}, mods queries.Applicator) error {
	var slice []*MonsterLevelUpMission
	var object *MonsterLevelUpMission

	if singular {
		var ok bool
		object, ok = maybeMonsterLevelUpMission.(*MonsterLevelUpMission)
		if !ok {
			object = new(MonsterLevelUpMission)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMonsterLevelUpMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMonsterLevelUpMission))
			}
		}
	} else {
		s, ok := maybeMonsterLevelUpMission.(*[]*MonsterLevelUpMission)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMonsterLevelUpMission)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMonsterLevelUpMission))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &monsterLevelUpMissionR{}
		}
		args = append(args, object.MonsterID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &monsterLevelUpMissionR{}
			}

			for _, a := range args {
				if a == obj.MonsterID {
					continue Outer
				}
			}

			args = append(args, obj.MonsterID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`monsters`),
		qm.WhereIn(`monsters.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Monster")
	}

	var resultSlice []*Monster
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Monster")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for monsters")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for monsters")
	}

	if len(monsterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Monster = foreign
		if foreign.R == nil {
			foreign.R = &monsterR{}
		}
		foreign.R.MonsterLevelUpMissions = append(foreign.R.MonsterLevelUpMissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MonsterID == foreign.ID {
				local.R.Monster = foreign
				if foreign.R == nil {
					foreign.R = &monsterR{}
				}
				foreign.R.MonsterLevelUpMissions = append(foreign.R.MonsterLevelUpMissions, local)
				break
			}
		}
	}

	return nil
}

// SetMission of the monsterLevelUpMission to the related item.
// Sets o.R.Mission to related.
// Adds o to related.R.MonsterLevelUpMission.
func (o *MonsterLevelUpMission) SetMission(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Mission) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"monster_level_up_missions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mission_id"}),
		strmangle.WhereClause("\"", "\"", 2, monsterLevelUpMissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MissionID = related.ID
	if o.R == nil {
		o.R = &monsterLevelUpMissionR{
			Mission: related,
		}
	} else {
		o.R.Mission = related
	}

	if related.R == nil {
		related.R = &missionR{
			MonsterLevelUpMission: o,
		}
	} else {
		related.R.MonsterLevelUpMission = o
	}

	return nil
}

// SetMonster of the monsterLevelUpMission to the related item.
// Sets o.R.Monster to related.
// Adds o to related.R.MonsterLevelUpMissions.
func (o *MonsterLevelUpMission) SetMonster(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Monster) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"monster_level_up_missions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"monster_id"}),
		strmangle.WhereClause("\"", "\"", 2, monsterLevelUpMissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MonsterID = related.ID
	if o.R == nil {
		o.R = &monsterLevelUpMissionR{
			Monster: related,
		}
	} else {
		o.R.Monster = related
	}

	if related.R == nil {
		related.R = &monsterR{
			MonsterLevelUpMissions: MonsterLevelUpMissionSlice{o},
		}
	} else {
		related.R.MonsterLevelUpMissions = append(related.R.MonsterLevelUpMissions, o)
	}

	return nil
}

// MonsterLevelUpMissions retrieves all the records using an executor.
func MonsterLevelUpMissions(mods ...qm.QueryMod) monsterLevelUpMissionQuery {
	mods = append(mods, qm.From("\"monster_level_up_missions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"monster_level_up_missions\".*"})
	}

	return monsterLevelUpMissionQuery{q}
}

// FindMonsterLevelUpMission retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMonsterLevelUpMission(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*MonsterLevelUpMission, error) {
	monsterLevelUpMissionObj := &MonsterLevelUpMission{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"monster_level_up_missions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, monsterLevelUpMissionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from monster_level_up_missions")
	}

	if err = monsterLevelUpMissionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return monsterLevelUpMissionObj, err
	}

	return monsterLevelUpMissionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MonsterLevelUpMission) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no monster_level_up_missions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(monsterLevelUpMissionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	monsterLevelUpMissionInsertCacheMut.RLock()
	cache, cached := monsterLevelUpMissionInsertCache[key]
	monsterLevelUpMissionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			monsterLevelUpMissionAllColumns,
			monsterLevelUpMissionColumnsWithDefault,
			monsterLevelUpMissionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(monsterLevelUpMissionType, monsterLevelUpMissionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(monsterLevelUpMissionType, monsterLevelUpMissionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"monster_level_up_missions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"monster_level_up_missions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into monster_level_up_missions")
	}

	if !cached {
		monsterLevelUpMissionInsertCacheMut.Lock()
		monsterLevelUpMissionInsertCache[key] = cache
		monsterLevelUpMissionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MonsterLevelUpMission.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MonsterLevelUpMission) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	monsterLevelUpMissionUpdateCacheMut.RLock()
	cache, cached := monsterLevelUpMissionUpdateCache[key]
	monsterLevelUpMissionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			monsterLevelUpMissionAllColumns,
			monsterLevelUpMissionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update monster_level_up_missions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"monster_level_up_missions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, monsterLevelUpMissionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(monsterLevelUpMissionType, monsterLevelUpMissionMapping, append(wl, monsterLevelUpMissionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update monster_level_up_missions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for monster_level_up_missions")
	}

	if !cached {
		monsterLevelUpMissionUpdateCacheMut.Lock()
		monsterLevelUpMissionUpdateCache[key] = cache
		monsterLevelUpMissionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q monsterLevelUpMissionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for monster_level_up_missions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for monster_level_up_missions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MonsterLevelUpMissionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monsterLevelUpMissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"monster_level_up_missions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, monsterLevelUpMissionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in monsterLevelUpMission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all monsterLevelUpMission")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MonsterLevelUpMission) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no monster_level_up_missions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(monsterLevelUpMissionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	monsterLevelUpMissionUpsertCacheMut.RLock()
	cache, cached := monsterLevelUpMissionUpsertCache[key]
	monsterLevelUpMissionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			monsterLevelUpMissionAllColumns,
			monsterLevelUpMissionColumnsWithDefault,
			monsterLevelUpMissionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			monsterLevelUpMissionAllColumns,
			monsterLevelUpMissionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert monster_level_up_missions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(monsterLevelUpMissionPrimaryKeyColumns))
			copy(conflict, monsterLevelUpMissionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"monster_level_up_missions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(monsterLevelUpMissionType, monsterLevelUpMissionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(monsterLevelUpMissionType, monsterLevelUpMissionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert monster_level_up_missions")
	}

	if !cached {
		monsterLevelUpMissionUpsertCacheMut.Lock()
		monsterLevelUpMissionUpsertCache[key] = cache
		monsterLevelUpMissionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MonsterLevelUpMission record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MonsterLevelUpMission) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MonsterLevelUpMission provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), monsterLevelUpMissionPrimaryKeyMapping)
	sql := "DELETE FROM \"monster_level_up_missions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from monster_level_up_missions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for monster_level_up_missions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q monsterLevelUpMissionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no monsterLevelUpMissionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from monster_level_up_missions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for monster_level_up_missions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MonsterLevelUpMissionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(monsterLevelUpMissionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monsterLevelUpMissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"monster_level_up_missions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, monsterLevelUpMissionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from monsterLevelUpMission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for monster_level_up_missions")
	}

	if len(monsterLevelUpMissionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MonsterLevelUpMission) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMonsterLevelUpMission(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MonsterLevelUpMissionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MonsterLevelUpMissionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monsterLevelUpMissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"monster_level_up_missions\".* FROM \"monster_level_up_missions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, monsterLevelUpMissionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MonsterLevelUpMissionSlice")
	}

	*o = slice

	return nil
}

// MonsterLevelUpMissionExists checks if the MonsterLevelUpMission row exists.
func MonsterLevelUpMissionExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"monster_level_up_missions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if monster_level_up_missions exists")
	}

	return exists, nil
}

// Exists checks if the MonsterLevelUpMission row exists.
func (o *MonsterLevelUpMission) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MonsterLevelUpMissionExists(ctx, exec, o.ID)
}
